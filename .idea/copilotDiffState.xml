<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/lib.rs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib.rs" />
              <option name="originalContent" value="use crate::config::Config;&#10;use bevy::prelude::*;&#10;use bevy::time::common_conditions::on_timer;&#10;use std::time::Duration;&#10;use systems::{camera, physics, trail, world_setup};&#10;&#10;mod components;&#10;mod config;&#10;mod constants;&#10;mod systems;&#10;&#10;pub struct Game;&#10;&#10;impl Plugin for Game {&#10;    fn build(&amp;self, app: &amp;mut App) {&#10;        app.insert_resource(Config { dt: 1. / 60. });&#10;        app.insert_resource(camera::DragState::default());&#10;        app.add_plugins(DefaultPlugins);&#10;        app.add_systems(Startup, (camera::create_camera, world_setup::create_world));&#10;        app.add_systems(&#10;            FixedUpdate,&#10;            (&#10;                physics::apply_force_system,&#10;                physics::gravity_system,&#10;                trail::add_trails.run_if(on_timer(Duration::from_millis(200))),&#10;            ),&#10;        );&#10;        app.add_systems(&#10;            Update,&#10;            (&#10;                camera::zoom_camera,&#10;                camera::pan_camera,&#10;                trail::render_trails,&#10;                camera::ignore_camera_scale_for_users,&#10;            ),&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="use crate::config::Config;&#10;use bevy::prelude::*;&#10;use bevy::time::common_conditions::on_timer;&#10;use std::time::Duration;&#10;use systems::{camera, physics, trail, world_setup};&#10;&#10;mod components;&#10;mod config;&#10;mod constants;&#10;mod systems;&#10;&#10;pub struct Game;&#10;&#10;impl Plugin for Game {&#10;    fn build(&amp;self, app: &amp;mut App) {&#10;        app.insert_resource(Config { dt: 1. / 60. });&#10;        app.insert_resource(camera::DragState::default());&#10;        app.add_plugins(DefaultPlugins);&#10;        app.add_systems(Startup, (camera::create_camera, world_setup::create_world));&#10;        app.add_systems(&#10;            FixedUpdate,&#10;            (&#10;                physics::apply_force_system,&#10;                physics::gravity_system,&#10;                physics::collision_system, // resolve after movement&#10;                trail::add_trails.run_if(on_timer(Duration::from_millis(200))),&#10;            ),&#10;        );&#10;        app.add_systems(&#10;            Update,&#10;            (&#10;                camera::zoom_camera,&#10;                camera::pan_camera,&#10;                trail::render_trails,&#10;                camera::ignore_camera_scale_for_users,&#10;            ),&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/systems/physics/mod.rs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/systems/physics/mod.rs" />
              <option name="originalContent" value="pub mod apply_force;&#10;pub mod gravity;&#10;mod collision_system;&#10;&#10;pub use apply_force::apply_force_system;&#10;pub use gravity::gravity_system;&#10;&#10;&#10;" />
              <option name="updatedContent" value="pub mod apply_force;&#10;pub mod gravity;&#10;mod collision_system;&#10;&#10;pub use apply_force::apply_force_system;&#10;pub use gravity::gravity_system;&#10;pub use collision_system::collision_system;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>